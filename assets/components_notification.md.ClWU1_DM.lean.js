import{o as t,e,w as i,h as d,i as n,g as o,B as a,f as s,b as c,l as r,n as l}from"./chunks/naive-ui.DyEX4l5m.js";import{_ as h}from"./chunks/index.vue_vue_type_script_setup_true_lang.q2_t13Z_.js";import{Q as p}from"./chunks/index.BsjzT1UF.js";import"./chunks/index.6vUEYOb4.js";import"./chunks/defu.CAfuikgh.js";import"./chunks/createLucideIcon.xZBn7lwy.js";const k={class:"mb-2 flex gap-2"},u={__name:"index",setup(c){function r(t){window.$notification[t]({content:"If I were you, I will realize that I love you more than any other guy",duration:2500,keepAliveOnHover:!0,meta:(new Date).toISOString(),title:"Notification"})}return(c,l)=>(t(),e(o(h),null,{default:i((()=>[d("div",k,[n(o(a),{type:"primary",onClick:l[0]||(l[0]=t=>r("info"))},{default:i((()=>l[4]||(l[4]=[s(" 信息 ")]))),_:1}),n(o(a),{type:"success",onClick:l[1]||(l[1]=t=>r("success"))},{default:i((()=>l[5]||(l[5]=[s(" 成功 ")]))),_:1}),n(o(a),{type:"error",onClick:l[2]||(l[2]=t=>r("error"))},{default:i((()=>l[6]||(l[6]=[s(" 错误 ")]))),_:1}),n(o(a),{type:"warning",onClick:l[3]||(l[3]=t=>r("warning"))},{default:i((()=>l[7]||(l[7]=[s(" 警告 ")]))),_:1})])])),_:1}))}},f=JSON.parse('{"title":"Notification 通知","description":"","frontmatter":{},"headers":[],"relativePath":"components/notification.md","filePath":"components/notification.md"}'),g={name:"components/notification.md"},E=Object.assign(g,{setup:e=>(e,d)=>{const a=l("ClientOnly");return t(),c("div",null,[d[0]||(d[0]=r('<h1 id="notification-通知" tabindex="-1">Notification 通知 <a class="header-anchor" href="#notification-通知" aria-label="Permalink to &quot;Notification 通知&quot;">​</a></h1><p>全局消息通知反馈。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><ul><li>🚀 允许你在任意组件或者非setup的地方使用。</li><li>🎯 快捷使用,少写一点代码,无需引入相关的Hook。</li></ul></div><h2 id="使用之前" tabindex="-1">使用之前 <a class="header-anchor" href="#使用之前" aria-label="Permalink to &quot;使用之前&quot;">​</a></h2><p>在系统人口或者根组件中引入</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import App from &#39;./app.vue&#39;;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import { RNProviderFeedback } from &#39;@nero/next&#39;;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RNProviderFeedback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RNProviderFeedback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-label="Permalink to &quot;基础用法&quot;">​</a></h2><p>可设置类型 success、info、warning、error达到不同的提示效果。</p>',8)),n(a,null,{default:i((()=>[n(o(p),{title:"",description:"",select:"vue",order:"vue,react,html",github:"",gitlab:"",theme:"",lightTheme:"atom-one-light",darkTheme:"atom-one-dark",stackblitz:"%7B%22show%22%3Afalse%7D",codesandbox:"%7B%22show%22%3Afalse%7D",codeplayer:"%7B%22show%22%3Afalse%7D",files:"%7B%22vue%22%3A%7B%7D%2C%22react%22%3A%7B%7D%2C%22html%22%3A%7B%7D%7D",scope:"",visible:!0,vueCode:o('<script setup>\nimport { RNProviderFeedback } from \'@nero/next\';\nimport { NButton } from \'naive-ui\';\n\nfunction openNotification(type) {\n  window.$notification[type]({\n    content:\n      \'If I were you, I will realize that I love you more than any other guy\',\n    duration: 2500,\n    keepAliveOnHover: true,\n    meta: new Date().toISOString(),\n    title: \'Notification\',\n  });\n}\n<\/script>\n<template>\n  <RNProviderFeedback>\n    <div class="mb-2 flex gap-2">\n      <NButton type="primary" @click="openNotification(\'info\')"> 信息 </NButton>\n      <NButton type="success" @click="openNotification(\'success\')">\n        成功\n      </NButton>\n      <NButton type="error" @click="openNotification(\'error\')"> 错误 </NButton>\n      <NButton type="warning" @click="openNotification(\'warning\')">\n        警告\n      </NButton>\n    </div>\n  </RNProviderFeedback>\n</template>\n')},{vue:i((()=>[n(u)])),_:1},8,["vueCode"])])),_:1}),d[1]||(d[1]=r('<h2 id="notification-方法" tabindex="-1">notification 方法 <a class="header-anchor" href="#notification-方法" aria-label="Permalink to &quot;notification 方法&quot;">​</a></h2><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>create</td><td><code>(option: NotificationOption) =&gt; NotificationReactive</code></td><td>创建通知框</td></tr><tr><td>destroyAll</td><td><code>() =&gt; void</code></td><td>销毁所有弹出的通知框</td></tr><tr><td>error</td><td><code>(option: NotificationOption) =&gt; NotificationReactive</code></td><td>调用 <code>error</code> 类型的通知框</td></tr><tr><td>info</td><td><code>(option: NotificationOption) =&gt; NotificationReactive</code></td><td>调用 <code>info</code> 类型的通知框</td></tr><tr><td>success</td><td><code>(option: NotificationOption) =&gt; NotificationReactive</code></td><td>调用 <code>success</code> 类型的通知框</td></tr><tr><td>warning</td><td><code>(option: NotificationOption) =&gt; NotificationReactive</code></td><td>调用 <code>warning</code> 类型的通知框</td></tr></tbody></table><h2 id="notificationoption-属性" tabindex="-1">NotificationOption 属性 <a class="header-anchor" href="#notificationoption-属性" aria-label="Permalink to &quot;NotificationOption 属性&quot;">​</a></h2><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>说明</th><th>版本</th></tr></thead><tbody><tr><td>action</td><td><code>string | (() =&gt; VNodeChild)</code></td><td><code>undefined</code></td><td>操作区域的内容,可以是 render 函数</td><td></td></tr><tr><td>avatar</td><td><code>() =&gt; VNodeChild</code></td><td><code>undefined</code></td><td>头像区域的内容</td><td></td></tr><tr><td>closable</td><td><code>boolean</code></td><td><code>true</code></td><td>是否显示 close 图标</td><td></td></tr><tr><td>content</td><td><code>string | (() =&gt; VNodeChild)</code></td><td><code>undefined</code></td><td>通知框内容，可以是 render 函数</td><td></td></tr><tr><td>description</td><td><code>string | (() =&gt; VNodeChild)</code></td><td><code>undefined</code></td><td>描述的内容，可以是 render 函数</td><td></td></tr><tr><td>duration</td><td><code>number</code></td><td><code>undefined</code></td><td>如果没有设定则不会自动关闭，单位毫秒</td><td></td></tr><tr><td>keepAliveOnHover</td><td><code>boolean</code></td><td><code>false</code></td><td>当鼠标移入时是否保持通知框显示</td><td>2.32.0</td></tr><tr><td>meta</td><td><code>string | (() =&gt; VNodeChild)</code></td><td><code>undefined</code></td><td><code>meta</code> 信息，可以是 render 函数</td><td></td></tr><tr><td>title</td><td><code>string | (() =&gt; VNodeChild)</code></td><td><code>undefined</code></td><td><code>title</code> 信息，可以是 render 函数</td><td></td></tr><tr><td>onAfterEnter</td><td><code>Function</code></td><td><code>undefined</code></td><td>过渡动画进入执行完后执行的回调</td><td></td></tr><tr><td>onAfterLeave</td><td><code>Function</code></td><td><code>undefined</code></td><td>过渡动画离开执行完后执行的回调</td><td></td></tr><tr><td>onClose</td><td><code>() =&gt; boolean | Promise&lt;boolean&gt;</code></td><td><code>undefined</code></td><td>关闭通知的回调，返回 <code>false</code>、Promise resolve <code>false</code> 或者 reject 会取消这次关闭</td><td></td></tr><tr><td>onLeave</td><td><code>Function</code></td><td><code>undefined</code></td><td>过渡动画离开时执行的回调</td><td></td></tr></tbody></table><h3 id="notificationreactive-methods" tabindex="-1">NotificationReactive Methods <a class="header-anchor" href="#notificationreactive-methods" aria-label="Permalink to &quot;NotificationReactive Methods&quot;">​</a></h3><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>destroy</td><td><code>()</code></td><td>销毁</td></tr></tbody></table>',6))])}});export{f as __pageData,E as default};
